<?xml version="1.0" encoding="UTF-8" standalone="no"?><umlet_diagram><help_text>// Uncomment the following line to change the fontsize:
// fontsize=14


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on UML elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use Â± or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text><zoom_level>10</zoom_level><element><type>com.umlet.element.base.Class</type><coordinates><x>300</x><y>190</y><w>330</w><h>320</h></coordinates><panel_attributes>GameLogic
--
- currentScore: Integer

- foods: ArrayList&lt;Food&gt;
- obstacles: ArrayList&lt;Obtacle&gt;
- snake: Snake
- gameWidth: Integer
- gameHeight: Integer

--
+ GameLogic(width: Integer, height: Integer)
+ setSnakeHeading(heading: Enum)
+ doOneTurn()
- moveSnake()
- checkObstacles(position: Point) : boolean
- checkForFood(position: Point) : boolean
- checkForSnake(position: Point) : boolean
- placeFood(point : Point)
- placeSnake(point : Point, heading : Heading)
- findRandomEmptySpot():Point
- feedSnake(food : Food)</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>680</x><y>190</y><w>410</w><h>200</h></coordinates><panel_attributes>Snake
--
- headPosition:Point
- body: Queue&lt;SnakeLimbs&gt;
- heading: Enum(n,o,s,w)
--
+ Snake(headPosition:Point, length: Integer, heading : Heading)
+ move() : Point
+ moveTo(newPosition:Point)
+ isAt(position: Point): Boolean
+ eat(food: Food)
+ grow(sizeToGrow: Integer)
+ setHeading(heading: Enum)</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>340</x><y>600</y><w>210</w><h>90</h></coordinates><panel_attributes>Food
--
- position: Point
--
+ Food(position: Point)
+ isAt(position: Point):Boolean</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>50</x><y>600</y><w>210</w><h>90</h></coordinates><panel_attributes>Obstacle
--
- position: Point
--
+ Obstacle(position: Point)
+ isAt(position: Point):Boolean
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>660</x><y>600</y><w>380</w><h>150</h></coordinates><panel_attributes>SnakeLimb
--
- position: Point
- heading: Enum(n,o,s,w)
- form: Enum(straight, bendLeft, bendRight)
- isTail: Boolean
--
+ SnakeLimb(position: Point, heading: Enum, form: Enum)
+ isAt(Point): Boolean
+ makeTail()

</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>600</x><y>260</y><w>100</w><h>50</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-
m2= 1..*</panel_attributes><additional_attributes>30;30;80;30</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>700</x><y>360</y><w>50</w><h>260</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-
m2=2..*</panel_attributes><additional_attributes>30;30;30;240</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>140</x><y>480</y><w>290</w><h>140</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-
m2=0..*</panel_attributes><additional_attributes>270;30;270;70;30;70;30;120</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>470</x><y>480</y><w>50</w><h>140</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-
m2=1..*</panel_attributes><additional_attributes>30;30;30;120</additional_attributes></element><element><type>com.umlet.element.base.Class</type><coordinates><x>10</x><y>190</y><w>200</w><h>140</h></coordinates><panel_attributes>GameApplication
--
- gameSpeed: Integer
- isPaused: Boolean
- gameLogic : GameLogic
- score: Integer
--
+ togglePause()
+ endGame()</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>180</x><y>240</y><w>140</w><h>50</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
m2=1
</panel_attributes><additional_attributes>30;30;120;30</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>400</x><y>100</y><w>158</w><h>110</h></coordinates><panel_attributes>lt=.&gt;
               realize</panel_attributes><additional_attributes>80;90;80;30</additional_attributes></element><element><type>com.umlet.element.base.Class</type><coordinates><x>420</x><y>100</y><w>120</w><h>30</h></coordinates><panel_attributes>GUI</panel_attributes><additional_attributes/></element></umlet_diagram>